'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CM")>  _
Partial Public Class InventoryDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertInventory(instance As Inventory)
    End Sub
  Partial Private Sub UpdateInventory(instance As Inventory)
    End Sub
  Partial Private Sub DeleteInventory(instance As Inventory)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CashManagement.My.MySettings.Default.CMConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Inventories() As System.Data.Linq.Table(Of Inventory)
		Get
			Return Me.GetTable(Of Inventory)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Inventory")>  _
Partial Public Class Inventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecordId As Integer
	
	Private _Description As String
	
	Private _CostPrice As Decimal
	
	Private _SellingPrice As Decimal
	
	Private _SupplierId As Integer
	
	Private _Dated As Date
	
	Private _InactiveInventory As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecordIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRecordIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCostPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCostPriceChanged()
    End Sub
    Partial Private Sub OnSellingPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSellingPriceChanged()
    End Sub
    Partial Private Sub OnSupplierIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSupplierIdChanged()
    End Sub
    Partial Private Sub OnDatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDatedChanged()
    End Sub
    Partial Private Sub OnInactiveInventoryChanging(value As Integer)
    End Sub
    Partial Private Sub OnInactiveInventoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RecordId() As Integer
		Get
			Return Me._RecordId
		End Get
		Set
			If ((Me._RecordId = value)  _
						= false) Then
				Me.OnRecordIdChanging(value)
				Me.SendPropertyChanging
				Me._RecordId = value
				Me.SendPropertyChanged("RecordId")
				Me.OnRecordIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostPrice", DbType:="Decimal(13,2) NOT NULL")>  _
	Public Property CostPrice() As Decimal
		Get
			Return Me._CostPrice
		End Get
		Set
			If ((Me._CostPrice = value)  _
						= false) Then
				Me.OnCostPriceChanging(value)
				Me.SendPropertyChanging
				Me._CostPrice = value
				Me.SendPropertyChanged("CostPrice")
				Me.OnCostPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellingPrice", DbType:="Decimal(13,2) NOT NULL")>  _
	Public Property SellingPrice() As Decimal
		Get
			Return Me._SellingPrice
		End Get
		Set
			If ((Me._SellingPrice = value)  _
						= false) Then
				Me.OnSellingPriceChanging(value)
				Me.SendPropertyChanging
				Me._SellingPrice = value
				Me.SendPropertyChanged("SellingPrice")
				Me.OnSellingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierId", DbType:="Int NOT NULL")>  _
	Public Property SupplierId() As Integer
		Get
			Return Me._SupplierId
		End Get
		Set
			If ((Me._SupplierId = value)  _
						= false) Then
				Me.OnSupplierIdChanging(value)
				Me.SendPropertyChanging
				Me._SupplierId = value
				Me.SendPropertyChanged("SupplierId")
				Me.OnSupplierIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dated", DbType:="DateTime NOT NULL")>  _
	Public Property Dated() As Date
		Get
			Return Me._Dated
		End Get
		Set
			If ((Me._Dated = value)  _
						= false) Then
				Me.OnDatedChanging(value)
				Me.SendPropertyChanging
				Me._Dated = value
				Me.SendPropertyChanged("Dated")
				Me.OnDatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveInventory", DbType:="Int NOT NULL")>  _
	Public Property InactiveInventory() As Integer
		Get
			Return Me._InactiveInventory
		End Get
		Set
			If ((Me._InactiveInventory = value)  _
						= false) Then
				Me.OnInactiveInventoryChanging(value)
				Me.SendPropertyChanging
				Me._InactiveInventory = value
				Me.SendPropertyChanged("InactiveInventory")
				Me.OnInactiveInventoryChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
