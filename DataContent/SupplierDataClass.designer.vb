'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CM")>  _
Partial Public Class SupplierDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSupplier(instance As Supplier)
    End Sub
  Partial Private Sub UpdateSupplier(instance As Supplier)
    End Sub
  Partial Private Sub DeleteSupplier(instance As Supplier)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CashManagement.My.MySettings.Default.CMConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
		Get
			Return Me.GetTable(Of Supplier)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Supplier")>  _
Partial Public Class Supplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecordId As Integer
	
	Private _Description As String
	
	Private _Telephone As String
	
	Private _CellNumber As String
	
	Private _PhysicalAddress1 As String
	
	Private _PhysicalAddress2 As String
	
	Private _PhysicalAddress3 As String
	
	Private _PhysicalCode As String
	
	Private _PostalAddress1 As String
	
	Private _PostalAddress2 As String
	
	Private _PostalAddress3 As String
	
	Private _PostalCode As String
	
	Private _BankName As String
	
	Private _BranchName As String
	
	Private _BranchNumber As String
	
	Private _AccountNumber As String
	
	Private _AccountType As String
	
	Private _InactiveSupplier As System.Nullable(Of Integer)
	
	Private _COS As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecordIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRecordIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTelephoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelephoneChanged()
    End Sub
    Partial Private Sub OnCellNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCellNumberChanged()
    End Sub
    Partial Private Sub OnPhysicalAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnPhysicalAddress1Changed()
    End Sub
    Partial Private Sub OnPhysicalAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnPhysicalAddress2Changed()
    End Sub
    Partial Private Sub OnPhysicalAddress3Changing(value As String)
    End Sub
    Partial Private Sub OnPhysicalAddress3Changed()
    End Sub
    Partial Private Sub OnPhysicalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalCodeChanged()
    End Sub
    Partial Private Sub OnPostalAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnPostalAddress1Changed()
    End Sub
    Partial Private Sub OnPostalAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnPostalAddress2Changed()
    End Sub
    Partial Private Sub OnPostalAddress3Changing(value As String)
    End Sub
    Partial Private Sub OnPostalAddress3Changed()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnBankNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankNameChanged()
    End Sub
    Partial Private Sub OnBranchNameChanging(value As String)
    End Sub
    Partial Private Sub OnBranchNameChanged()
    End Sub
    Partial Private Sub OnBranchNumberChanging(value As String)
    End Sub
    Partial Private Sub OnBranchNumberChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnAccountTypeChanging(value As String)
    End Sub
    Partial Private Sub OnAccountTypeChanged()
    End Sub
    Partial Private Sub OnInactiveSupplierChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInactiveSupplierChanged()
    End Sub
    Partial Private Sub OnCOSChanging(value As Integer)
    End Sub
    Partial Private Sub OnCOSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RecordId() As Integer
		Get
			Return Me._RecordId
		End Get
		Set
			If ((Me._RecordId = value)  _
						= false) Then
				Me.OnRecordIdChanging(value)
				Me.SendPropertyChanging
				Me._RecordId = value
				Me.SendPropertyChanged("RecordId")
				Me.OnRecordIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telephone", DbType:="VarChar(15)")>  _
	Public Property Telephone() As String
		Get
			Return Me._Telephone
		End Get
		Set
			If (String.Equals(Me._Telephone, value) = false) Then
				Me.OnTelephoneChanging(value)
				Me.SendPropertyChanging
				Me._Telephone = value
				Me.SendPropertyChanged("Telephone")
				Me.OnTelephoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellNumber", DbType:="VarChar(15)")>  _
	Public Property CellNumber() As String
		Get
			Return Me._CellNumber
		End Get
		Set
			If (String.Equals(Me._CellNumber, value) = false) Then
				Me.OnCellNumberChanging(value)
				Me.SendPropertyChanging
				Me._CellNumber = value
				Me.SendPropertyChanged("CellNumber")
				Me.OnCellNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalAddress1", DbType:="VarChar(30)")>  _
	Public Property PhysicalAddress1() As String
		Get
			Return Me._PhysicalAddress1
		End Get
		Set
			If (String.Equals(Me._PhysicalAddress1, value) = false) Then
				Me.OnPhysicalAddress1Changing(value)
				Me.SendPropertyChanging
				Me._PhysicalAddress1 = value
				Me.SendPropertyChanged("PhysicalAddress1")
				Me.OnPhysicalAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalAddress2", DbType:="VarChar(30)")>  _
	Public Property PhysicalAddress2() As String
		Get
			Return Me._PhysicalAddress2
		End Get
		Set
			If (String.Equals(Me._PhysicalAddress2, value) = false) Then
				Me.OnPhysicalAddress2Changing(value)
				Me.SendPropertyChanging
				Me._PhysicalAddress2 = value
				Me.SendPropertyChanged("PhysicalAddress2")
				Me.OnPhysicalAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalAddress3", DbType:="VarChar(30)")>  _
	Public Property PhysicalAddress3() As String
		Get
			Return Me._PhysicalAddress3
		End Get
		Set
			If (String.Equals(Me._PhysicalAddress3, value) = false) Then
				Me.OnPhysicalAddress3Changing(value)
				Me.SendPropertyChanging
				Me._PhysicalAddress3 = value
				Me.SendPropertyChanged("PhysicalAddress3")
				Me.OnPhysicalAddress3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalCode", DbType:="VarChar(4)")>  _
	Public Property PhysicalCode() As String
		Get
			Return Me._PhysicalCode
		End Get
		Set
			If (String.Equals(Me._PhysicalCode, value) = false) Then
				Me.OnPhysicalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalCode = value
				Me.SendPropertyChanged("PhysicalCode")
				Me.OnPhysicalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddress1", DbType:="VarChar(30)")>  _
	Public Property PostalAddress1() As String
		Get
			Return Me._PostalAddress1
		End Get
		Set
			If (String.Equals(Me._PostalAddress1, value) = false) Then
				Me.OnPostalAddress1Changing(value)
				Me.SendPropertyChanging
				Me._PostalAddress1 = value
				Me.SendPropertyChanged("PostalAddress1")
				Me.OnPostalAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddress2", DbType:="VarChar(30)")>  _
	Public Property PostalAddress2() As String
		Get
			Return Me._PostalAddress2
		End Get
		Set
			If (String.Equals(Me._PostalAddress2, value) = false) Then
				Me.OnPostalAddress2Changing(value)
				Me.SendPropertyChanging
				Me._PostalAddress2 = value
				Me.SendPropertyChanged("PostalAddress2")
				Me.OnPostalAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddress3", DbType:="VarChar(30)")>  _
	Public Property PostalAddress3() As String
		Get
			Return Me._PostalAddress3
		End Get
		Set
			If (String.Equals(Me._PostalAddress3, value) = false) Then
				Me.OnPostalAddress3Changing(value)
				Me.SendPropertyChanging
				Me._PostalAddress3 = value
				Me.SendPropertyChanged("PostalAddress3")
				Me.OnPostalAddress3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="VarChar(4)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankName", DbType:="VarChar(20)")>  _
	Public Property BankName() As String
		Get
			Return Me._BankName
		End Get
		Set
			If (String.Equals(Me._BankName, value) = false) Then
				Me.OnBankNameChanging(value)
				Me.SendPropertyChanging
				Me._BankName = value
				Me.SendPropertyChanged("BankName")
				Me.OnBankNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchName", DbType:="VarChar(20)")>  _
	Public Property BranchName() As String
		Get
			Return Me._BranchName
		End Get
		Set
			If (String.Equals(Me._BranchName, value) = false) Then
				Me.OnBranchNameChanging(value)
				Me.SendPropertyChanging
				Me._BranchName = value
				Me.SendPropertyChanged("BranchName")
				Me.OnBranchNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchNumber", DbType:="VarChar(20)")>  _
	Public Property BranchNumber() As String
		Get
			Return Me._BranchNumber
		End Get
		Set
			If (String.Equals(Me._BranchNumber, value) = false) Then
				Me.OnBranchNumberChanging(value)
				Me.SendPropertyChanging
				Me._BranchNumber = value
				Me.SendPropertyChanged("BranchNumber")
				Me.OnBranchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="VarChar(20)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountType", DbType:="VarChar(20)")>  _
	Public Property AccountType() As String
		Get
			Return Me._AccountType
		End Get
		Set
			If (String.Equals(Me._AccountType, value) = false) Then
				Me.OnAccountTypeChanging(value)
				Me.SendPropertyChanging
				Me._AccountType = value
				Me.SendPropertyChanged("AccountType")
				Me.OnAccountTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InactiveSupplier", DbType:="Int")>  _
	Public Property InactiveSupplier() As System.Nullable(Of Integer)
		Get
			Return Me._InactiveSupplier
		End Get
		Set
			If (Me._InactiveSupplier.Equals(value) = false) Then
				Me.OnInactiveSupplierChanging(value)
				Me.SendPropertyChanging
				Me._InactiveSupplier = value
				Me.SendPropertyChanged("InactiveSupplier")
				Me.OnInactiveSupplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COS", DbType:="Int NOT NULL")>  _
	Public Property COS() As Integer
		Get
			Return Me._COS
		End Get
		Set
			If ((Me._COS = value)  _
						= false) Then
				Me.OnCOSChanging(value)
				Me.SendPropertyChanging
				Me._COS = value
				Me.SendPropertyChanged("COS")
				Me.OnCOSChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
